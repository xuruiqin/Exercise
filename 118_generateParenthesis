class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        ans = []
        #count1 = 0
        #count2 = 0

        def trackback(combination: List[str], count1: int, count2: int):
            if(len(combination) == 2*n):
                ans.append(''.join(combination))
                return

            else:
                if(count1 < n):
                    #count1 += 1
                    combination.append('(')
                    trackback(combination, 1 + count1, count2)
                    #count1 -= 1
                    combination.pop()
                if(count2 < count1):
                    #count2 += 1
                    combination.append(')')
                    trackback(combination, count1, 1 + count2)
                    #count2 -= 1
                    combination.pop()
        
        trackback([], 0, 0)
        return ans

#####################################
递归
class Solution:
    @lru_cache(None)
    def generateParenthesis(self, n: int) -> List[str]:
        if n == 0:
            return ['']
        ans = []
        for c in range(n):
            for left in self.generateParenthesis(c):
                for right in self.generateParenthesis(n-1-c):
                    ans.append('({}){}'.format(left, right))
        return ans

作者：力扣官方题解
链接：https://leetcode.cn/problems/generate-parentheses/solutions/192912/gua-hao-sheng-cheng-by-leetcode-solution/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
