class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        edges = collections.defaultdict(list)
        visited = [0]*numCourses #存储课程的访问状态
        #result = list()

        valid = True #随时更新判断

        for info in prerequisites:
            edges[info[1]].append(info[0]) #将前序课程转换成字典

        def dfs(u: int) -> None: #深度搜索，判断每个课程
            nonlocal valid
            visited[u] = 1 #当前课程u访问状态改为1
            for v in edges[u]: #对于课程u的所有前置课程，进行处理
                if(visited[v] == 0): #课程v未被访问，则进入深度搜索
                    dfs(v)
                    if(not valid): #判据为否，跳出循环
                        return
                elif(visited[v] == 1): #课程v正在被访问, 说明有向图循环，判据为否，跳出循环
                    valid = False
                    return

            visited[u] = 2 #课程u及其前置课程都被访问，u的状态置为2
            #result.append(u)

        for i in range(numCourses): #对所有课程进行处理
            if(valid and not visited[i]): #如果valid为True并且课程i未被访问
                dfs(i) #处理课程i

        return valid

#方法二 广度优先
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        edges = collections.defaultdict(list)
        indege = [0]*numCourses #存储课程的访问状态      

        for info in prerequisites:
            edges[info[1]].append(info[0]) #将课程对应的先修课映射关系转换成字典
            indege[info[0]] += 1 #该先修课程对应的计数＋1，代表有多少课程需要该课程作为先修课

        q = collections.deque([u for u in range(numCourses) if indege[u] == 0]) #不是先修课的课程入队列
        visited = 0 #记录被访问课程次数

        while(q):
            visited += 1
            u = q.popleft()
            for v in edges[u]:
                indege[v] -= 1
                if(indege[v] == 0): #如果该先修课对应的后修课都被处理过，那么该先修课入队列
                    q.append(v)

        return visited == numCourses
