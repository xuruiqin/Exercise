#方法一：简单遍历
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        maxprofit = 0
        day = len(prices)
        for i in range(1,day):
            if(prices[i] > prices[i-1]):
                maxprofit += prices[i] - prices[i-1]
            else:
                continue
        return maxprofit

#方法二：动态规划
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        day = len(prices)
        dp = [[0 for _ in range(2)] for _ in range(day)]
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        for i in range(1, day):
            dp[i][0] = max(dp[i-1][1]+prices[i],dp[i-1][0])
            dp[i][1] = max(dp[i-1][1],dp[i-1][0]-prices[i])
        return dp[day-1][0]
#方法三：贪心算法
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        day = len(prices)
        maxprofit = 0
        for i in range(1, day):
            maxprofit += max(0, prices[i] - prices[i-1])
        return maxprofit
'''
示例 1：

输入：prices = [7,1,5,3,6,4]
输出：7
解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。
随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3。
最大总利润为 4 + 3 = 7 。
示例 2：

输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。
最大总利润为 4 。
示例 3：

输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0。
 '''
