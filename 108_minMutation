class Solution:
    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:
        if(len(startGene) != len(endGene)):
            return -1
        bank = set(bank)
        if(endGene not in bank):
            return -1

        q = collections.deque([(startGene, 0)])
        visited = set([startGene])
        while(q):
            cur, step = q.popleft()
            if(cur == endGene):
                return step
            
            for idx in range(len(startGene)):
                for ch in ['A', 'C', 'G', 'T']:                  
                    newGene = cur[:idx] + ch + cur[idx+1:]
                    if(newGene in bank and newGene not in visited):
                        q.append((newGene,step+1))
            
        return -1
        
