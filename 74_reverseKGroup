# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if(k==1):
            return head
        dummy_node = ListNode(-1)
        dummy_node.next = head
        pre = dummy_node

        while(True):
            tail = pre
            for _ in range(k):
                tail = tail.next
                if not tail:
                    return dummy_node.next

            # 保存下一组的起始节点
            next_group = tail.next

            # 反转当前组的节点
            cur = pre.next
            while cur.next != next_group:
                next_node = cur.next
                cur.next = next_node.next
                next_node.next = pre.next
                pre.next = next_node

            # 更新 pre 和 cur 指针，移动到下一组
            pre = cur
            cur = cur.next
