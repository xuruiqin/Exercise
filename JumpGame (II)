#贪心算法
class Solution:
    def jump(self, nums: List[int]) -> int:
        n = len(nums)
        maxposition = 0 #当前能到达的最远的位置
        end = 0 #当前跳跃的可供选择的边界
        step = 0 #当前跳跃次数
        for i in range(n-1):
            if(i <= maxposition):
                maxposition = max(maxposition, i+nums[i])
                if(i == end): #遍历到当前跳跃边界时，更新边界，跳跃次数＋1
                    end = maxposition
                    step += 1
        return step

'''
给定一个长度为 n 的 0 索引整数数组 nums。初始位置为 nums[0]。

每个元素 nums[i] 表示从索引 i 向前跳转的最大长度。换句话说，如果你在 nums[i] 处，你可以跳转到任意 nums[i + j] 处:

0 <= j <= nums[i] 
i + j < n
返回到达 nums[n - 1] 的最小跳跃次数。生成的测试用例可以到达 nums[n - 1]。
'''
