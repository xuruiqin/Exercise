# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        right_value_at_depth = dict()
        height = -1

        stack = [[root,0]]
        while(stack):
            node, depth = stack.pop()

            if(node):
                height = max(height, depth)

                right_value_at_depth.setdefault(depth, node.val) #不存在depth时，插入map

                stack.append([node.left, depth + 1])
                stack.append([node.right, depth + 1])


        return [right_value_at_depth[depth] for depth in range(height + 1)]


