class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if(not board):
            return

        m, n = len(board), len(board[0])
        que = collections.deque()
        for i in range(m):
            if(board[i][0] == 'O'):
                que.append((i, 0))
                board[i][0] = 'A'
            if(board[i][n-1] == 'O'):
                que.append((i, n-1))
                board[i][n-1] = 'A'

        for j in range(n-1):
            if(board[0][j] == 'O'):
                que.append((0, j))
                board[0][j] = 'A'
            if(board[m-1][j] == 'O'):
                que.append((m-1, j))
                board[m-1][j] = 'A'


        while(que):
            x, y = que.popleft()
            for mx, my in [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]:
                if(0 <= mx < m and 0 <= my < n and board[mx][my] == 'O'):
                    que.append((mx, my))
                    board[mx][my] = 'A'


        for i in range(m):
            for j in range(n):
                if(board[i][j] == 'O'):
                    board[i][j] = 'X'

                elif(board[i][j] == 'A'):
                    board[i][j] = 'O'

#方法二
class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if(not board):
            return

        def dfs(r: int, c: int) -> None:
            if(not 0 <= r < m or not 0 <= c < n or board[r][c] != 'O'):
                return

            board[r][c] = "A"
            dfs(r-1, c)
            dfs(r+1, c)
            dfs(r, c-1)
            dfs(r, c+1)

        m, n = len(board), len(board[0])
        #que = collections.deque()
        for i in range(m):
           dfs(i, 0)
           dfs(i, n-1)

        for j in range(n-1):
            dfs(0, j)
            dfs(m-1, j)
        
        for i in range(m):
            for j in range(n):
                if(board[i][j] == 'O'):
                    board[i][j] = 'X'

                elif(board[i][j] == 'A'):
                    board[i][j] = 'O'

