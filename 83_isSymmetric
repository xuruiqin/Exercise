# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def check(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if(not p and not q):
            return True
        if(not p or not q):
            return False
        
        return p.val == q.val and self.check(p.left, q.right) and self.check(p.right, q.left)
    
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        if(not root):
            return True

        return self.check(root.left, root.right)

#方法二
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        if(not root):
            return True

        queue = list()

        queue.append(root)
        queue.append(root)

        while(queue):
            node1 = queue.pop()
            node2 = queue.pop()
            if(not node1 and not node2):
                continue
            if(not node1 or not node2):
                return False
            if(node1.val != node2.val):
                return False
            queue.append(node1.left)
            queue.append(node2.right)
            queue.append(node1.right)
            queue.append(node2.left)

        return True
