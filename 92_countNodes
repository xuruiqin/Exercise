# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def countNodes(self, root: Optional[TreeNode]) -> int:
        if(not root):
            return 0
        if(not root.left and not root.right):
            return 1

        return 1 + self.countNodes(root.left) + self.countNodes(root.right)
        
方法二：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def countNodes(self, root: Optional[TreeNode]) -> int:
        if(not root):
            return 0
        if(not root.left and not root.right):
            return 1

        node_que = collections.deque([])
        node_que.append(root)
        count = 0

        while(node_que):
            node = node_que.popleft()
            count += 1
            if(node.left):
                node_que.append(node.left)
            if(node.right):
                node_que.append(node.right)

        return count
