class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        n = len(board)       
        def pos(num: int) -> (int, int):
            c = (num-1) % n
            r = (num-1) // n
            if(r % 2 == 1):
                c = n-1-c
            return n-1-r, c
                
        q = collections.deque([(1,0)]) #初始编号，走过的步数
        visit = set()
        while(q):
            idx, step = q.popleft()
            for i in range(1, 6+1):
                idx_nxt = idx + i
                if(idx_nxt > n*n):
                    break
                
                x_nxt, y_nxt = pos(idx_nxt) #更新下一步的行列
                if(board[x_nxt][y_nxt] > 0):
                    idx_nxt = board[x_nxt][y_nxt] #遇到梯子或蛇，跳转
                if(idx_nxt == n*n): #到达终点，返回步数
                    return step + 1
                if(idx_nxt not in visit): #未到达终点，记录当前编号
                    visit.add(idx_nxt)
                    q.append((idx_nxt, step + 1)) #扩展新状态至队列

        return -1
