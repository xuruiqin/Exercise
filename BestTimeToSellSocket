#方法一： 暴力求解，会超时
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        maxp = 0
        inday = 0
        outday = 1
        length = len(prices)
        for i in range(length-1):
            for j in range(i+1, length):
                if(maxp <= prices[j] - prices[i]):
                    inday = i
                    outday = j
                    maxp = prices[j] - prices[i]
        return maxp
#方法二：记录历史最低价，更新最大利润
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        inf = int(1e9)
        minprice = inf
        maxprofit = 0
        for price in prices:
            maxprofit = max(price - minprice, maxprofit)
            minprice = min(price, minprice)
        return maxprofit
'''
给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。

你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。

返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
'''
