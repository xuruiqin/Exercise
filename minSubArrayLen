class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        start = 0
        end = 0
        if(nums[start] >= target):
            return 1

        minLen = len(nums)
        summ = nums[start]

        while(True):
            if(end == len(nums) -1):
                break

            if(summ < target):
                end += 1
                summ += nums[end]
            
            else:
                #print(start, end, summ)
                newLen = end - start + 1
                if(newLen < minLen):
                    minLen = newLen
                start += 1
                summ -= nums[start-1]

        print(start, end, summ)

        if(summ < target):
            print("case A")
            if(start == 0):
                return 0
            else:
                summ += nums[start-1]
                if(summ >= target):
                    return min(minLen, end - start+1)
        else:
            print("case B")
            newLen = end - start + 1
            while(summ >= target):
                start += 1
                summ -= nums[start-1]
                newLen -= 1
            return min(minLen, newLen+1)


原题：https://leetcode.cn/problems/minimum-size-subarray-sum/submissions/596948730/?envType=study-plan-v2&envId=top-interview-150

        
        
        
