# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    #def __init__(self, preorderList = list()):
    #    self.preorderList = preorderList

    def preorderTraversal(self, root: TreeNode, res: list) -> list:
        if(root):
            res.append(root)
            self.preorderTraversal(root.left, res)
            self.preorderTraversal(root.right, res)
        return res

    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        if(not root):
            return None
        if(not root.left and not root.right):
            return root
        
        res = list()
        self.preorderTraversal(root, res)
        size = len(res)
        for i in range(1,size):
            prev, cur = res[i-1], res[i]
            prev.left = None
            prev.right = cur

#方法二
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    #def __init__(self, preorderList = list()):
    #    self.preorderList = preorderList

    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        if(not root):
            return None
        if(not root.left and not root.right):
            return root

        preorderList = list()
        stack = list()
        node = root

        while(node or stack):
            while(node):#一直顺着左边路线将所有左孩子入列表和入栈
                preorderList.append(node)
                stack.append(node)
                node = node.left
            node = stack.pop() #直到没有左孩子了，往上层回退
            node = node.right #处理右孩子

        size = len(preorderList)
        for i in range(1, size):
            prev, cur = preorderList[i-1], preorderList[i]
            prev.left = None
            prev.right = cur
            
        
        
